variables:
  AGRU: v0.1.5
  ALPINE: 3.18.4
  ANSIBLE: 8.5.0
  ANSIBLE_CORE: 2.15.6

stages:
  - base
  - release
  - postrelease

base:
  stage: base
  rules:
    - if: $CI_COMMIT_REF_SLUG == "fresh" && $CI_PIPELINE_SOURCE == "push"
      changes:
        - Dockerfile.base
        - .gitlab-ci.yml
  services:
    - docker:dind
  image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/jdrouet/docker-with-buildx:latest
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    - docker buildx create --use
    - docker buildx build --platform linux/arm64/v8,linux/amd64 --push
      -t ${CI_REGISTRY_IMAGE}/base:${ALPINE}-${ANSIBLE_CORE}-${ANSIBLE}
      --build-arg AGRU="$AGRU"
      --build-arg ALPINE="$ALPINE"
      --build-arg ANSIBLE="$ANSIBLE"
      --build-arg ANSIBLE_CORE="$ANSIBLE_CORE"
      -f Dockerfile.base
      .
  tags:
    - docker

fresh:
  stage: release
  only: ['fresh']
  except: ['schedules']
  services:
    - docker:dind
  image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/jdrouet/docker-with-buildx:latest
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    - docker buildx create --use
    - docker buildx build --platform linux/arm64/v8,linux/amd64 --push
      -t $CI_REGISTRY_IMAGE:fresh
      -t registry.etke.cc/etke.cc/ansible:fresh
      --build-arg ALPINE="$ALPINE"
      --build-arg ANSIBLE="$ANSIBLE"
      --build-arg ANSIBLE_CORE="$ANSIBLE_CORE"
      .
  tags:
    - docker

stable:
  stage: release
  only: ['master']
  except: ['schedules']
  services:
    - docker:dind
  image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/jdrouet/docker-with-buildx:latest
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    - docker buildx create --use
    - docker buildx build --platform linux/arm64/v8,linux/amd64 --push
      -t $CI_REGISTRY_IMAGE
      -t registry.etke.cc/etke.cc/ansible
      --build-arg ALPINE="$ALPINE"
      --build-arg ANSIBLE="$ANSIBLE"
      --build-arg ANSIBLE_CORE="$ANSIBLE_CORE"
      .
  tags:
    - docker

sync images (all):
  stage: postrelease
  only: ['fresh']
  image:
    name: $CI_REGISTRY_IMAGE:fresh
    entrypoint: [""]
  before_script:
    - apk --no-cache add skopeo parallel
    - skopeo login --username $DOCKER_HUB_LOGIN --password $DOCKER_HUB_PASSWORD docker.io
    - cp -r /playbook/.config/inventory /
  script:
    - cd /playbook; ansible-playbook play/all.yml -l localhost -t skopeo -e target=localhost
    - sh play/.skopeo-parallel
  allow_failure: true

sync images (only latest):
  stage: postrelease
  only: ['schedules']
  image:
    name: $CI_REGISTRY_IMAGE:fresh
    entrypoint: [""]
  before_script:
    - apk --no-cache add skopeo parallel
    - skopeo login --username $DOCKER_HUB_LOGIN --password $DOCKER_HUB_PASSWORD docker.io
    - cp -r /playbook/.config/inventory /
  script:
    - cd /playbook; ansible-playbook play/all.yml -l localhost -t skopeo,only-latest -e target=localhost
    - sh play/.skopeo-parallel
  allow_failure: true
