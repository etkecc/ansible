stages:
  - release
  - postrelease

base:
  stage: release
  when: manual
  services:
    - docker:dind
  image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/jdrouet/docker-with-buildx:stable
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    - docker buildx create --use
    - docker buildx build --platform linux/arm64/v8,linux/amd64 --push -t ${CI_REGISTRY_IMAGE}/base -t registry.etke.cc/etke.cc/ansible/base -f Dockerfile.base .
  tags:
    - docker

fresh:
  stage: release
  rules:
    - if: $CI_COMMIT_REF_NAME == 'fresh' && $CI_PIPELINE_SOURCE != 'schedule'
  services:
    - docker:dind
  image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/jdrouet/docker-with-buildx:stable
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    - docker buildx create --use
    - docker buildx build --platform linux/arm64/v8,linux/amd64 --push -t $CI_REGISTRY_IMAGE:fresh -t registry.etke.cc/etke.cc/ansible:fresh .
  tags:
    - docker

sync images:
  stage: postrelease
  rules:
    - if: $CI_COMMIT_REF_NAME == 'fresh' && ($CI_PIPELINE_SOURCE == 'schedule' || $CI_PIPELINE_SOURCE == 'push' || $CI_PIPELINE_SOURCE == 'merge_request_event')
  image:
    name: $CI_REGISTRY_IMAGE:fresh
    entrypoint: [""]
  before_script:
    - cp -r /playbook/.config/inventory /
  script:
    - cd /playbook; ansible-playbook play/all.yml -l localhost -t skopeo -e target=localhost
  allow_failure: true

stable:
  stage: release
  rules:
    - if: $CI_COMMIT_REF_NAME == 'master'
  services:
    - docker:dind
  image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/jdrouet/docker-with-buildx:stable
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    - docker buildx create --use
    - docker buildx build --platform linux/arm64/v8,linux/amd64 --push -t $CI_REGISTRY_IMAGE -t registry.etke.cc/etke.cc/ansible .
  tags:
    - docker
