---
########################################################################
#                                                                      #
# migration                                                            #
#                                                                      #
########################################################################

mash_playbook_service_identifier_prefix: matrix-
mash_playbook_generic_secret_key: "{{ matrix_homeserver_generic_secret_key }}"
mash_playbook_base_path: "{{ matrix_base_data_path }}"
mash_playbook_service_base_directory_name_prefix: ''
mash_playbook_uid: "{{ matrix_user_uid }}"
mash_playbook_gid: "{{ matrix_user_gid }}"
mash_playbook_traefik_labels_enabled: "{{ matrix_playbook_traefik_labels_enabled }}"
mash_playbook_reverse_proxyable_services_additional_network: "{{ matrix_playbook_reverse_proxyable_services_additional_network }}"
devture_systemd_docker_base_container_network_creation_method: ansible-module

# valkey customization
valkey_enabled: "{{ matrix_synapse_workers_enabled or funkwhale_enabled or peertube_enabled or (matrix_hookshot_enabled and matrix_hookshot_encryption_enabled) or matrix_element_call_enabled }}"

peertube_config_redis_db: 13
funkwhale_config_redis_database: 14
matrix_synapse_redis_dbid: 15

# just copied from disabled roles
matrix_dendrite_max_file_size_bytes: 1073741824
matrix_conduit_max_request_size: 20_000_000
matrix_media_repo_metrics_enabled: false

########################################################################
#                                                                      #
# etherpad                                                             #
#                                                                      #
########################################################################

# Unlike MDAD, we use https://github.com/etkecc/etherpad (ghcr.io/etkecc/etherpad) which provides additional plugins
# Disabled due to constant issues with plugins
# etherpad_container_image: "{{ etherpad_container_image_registry_prefix }}etkecc/etherpad:{{ etherpad_container_image_tag }}"
# etherpad_container_image_registry_prefix_upstream_default: ghcr.io/

########################################################################
#                                                                      #
# languagetool                                                         #
#                                                                      #
########################################################################

languagetool_enabled: false
languagetool_identifier: "{{ mash_playbook_service_identifier_prefix }}languagetool"
languagetool_base_path: "{{ mash_playbook_base_path }}/{{ mash_playbook_service_base_directory_name_prefix }}languagetool"

languagetool_uid: "{{ mash_playbook_uid }}"
languagetool_gid: "{{ mash_playbook_gid }}"

languagetool_container_image_registry_prefix_upstream: "{{ matrix_container_global_registry_prefix_override if matrix_container_global_registry_prefix_override else languagetool_container_image_registry_prefix_upstream_default }}"

languagetool_container_network: "{{ matrix_addons_container_network }}"
languagetool_container_labels_traefik_enabled: "{{ mash_playbook_traefik_labels_enabled }}"
languagetool_container_labels_traefik_docker_network: "{{ mash_playbook_reverse_proxyable_services_additional_network }}"
languagetool_container_labels_traefik_entrypoints: "{{ traefik_entrypoint_primary }}"
languagetool_container_labels_traefik_tls_certResolver: "{{ traefik_certResolver_primary }}"
languagetool_container_additional_networks_auto: |
  {{
    ([mash_playbook_reverse_proxyable_services_additional_network] if mash_playbook_reverse_proxyable_services_additional_network else [])
  }}

########################################################################
#                                                                      #
# linkding                                                             #
#                                                                      #
########################################################################

linkding_enabled: false

linkding_identifier: "{{ mash_playbook_service_identifier_prefix }}linkding"

linkding_base_path: "{{ mash_playbook_base_path }}/{{ mash_playbook_service_base_directory_name_prefix }}linkding"

linkding_uid: "{{ mash_playbook_uid }}"
linkding_gid: "{{ mash_playbook_gid }}"

linkding_systemd_required_services_list_auto: |
  {{
    ([postgres_identifier ~ '.service'] if postgres_enabled and linkding_database_hostname == postgres_identifier else [])
  }}

linkding_container_image_registry_prefix_upstream: "{{ matrix_container_global_registry_prefix_override if matrix_container_global_registry_prefix_override else linkding_container_image_registry_prefix_upstream_default }}"

linkding_container_network: "{{ matrix_addons_container_network }}"

linkding_container_additional_networks_auto: |
  {{
    ([mash_playbook_reverse_proxyable_services_additional_network] if mash_playbook_reverse_proxyable_services_additional_network else [])
    +
    ([postgres_container_network] if postgres_enabled and linkding_database_hostname == postgres_identifier and linkding_container_network != postgres_container_network else [])
  }}

linkding_container_labels_traefik_enabled: "{{ mash_playbook_traefik_labels_enabled }}"
linkding_container_labels_traefik_docker_network: "{{ mash_playbook_reverse_proxyable_services_additional_network }}"
linkding_container_labels_traefik_entrypoints: "{{ traefik_entrypoint_primary }}"
linkding_container_labels_traefik_tls_certResolver: "{{ traefik_certResolver_primary }}"

linkding_database_hostname: "{{ postgres_connection_hostname if postgres_enabled else '' }}"
linkding_database_password: "{{ '%s' | format(mash_playbook_generic_secret_key) | password_hash('sha512', 'linkding.db', rounds=655555) | to_uuid }}"
linkding_database_engine: "{{ 'postgres' if postgres_enabled and linkding_database_hostname == postgres_connection_hostname else 'sqlite' }}"

########################################################################
#                                                                      #
# miniflux                                                             #
#                                                                      #
########################################################################

miniflux_enabled: false

miniflux_identifier: custom-miniflux

miniflux_base_path: "{{ matrix_base_data_path }}/custom-miniflux"

miniflux_uid: "{{ matrix_user_uid }}"
miniflux_gid: "{{ matrix_user_gid }}"

miniflux_container_image_registry_prefix_upstream: "{{ matrix_container_global_registry_prefix_override if matrix_container_global_registry_prefix_override else miniflux_container_image_registry_prefix_upstream_default }}"

miniflux_container_network: "{{ matrix_addons_container_network }}"

miniflux_container_additional_networks_auto: |
  {{
    ([matrix_playbook_reverse_proxyable_services_additional_network] if (matrix_playbook_reverse_proxyable_services_additional_network and miniflux_container_labels_traefik_enabled) else [])
    +
    ([postgres_container_network] if (postgres_enabled and miniflux_database_hostname == postgres_connection_hostname and postgres_container_network != miniflux_container_network) else [])
  }}

miniflux_container_labels_traefik_enabled: "{{ matrix_playbook_reverse_proxy_type in ['playbook-managed-traefik', 'other-traefik-container'] }}"
miniflux_container_labels_traefik_docker_network: "{{ matrix_playbook_reverse_proxyable_services_additional_network }}"
miniflux_container_labels_traefik_entrypoints: "{{ traefik_entrypoint_primary }}"
miniflux_container_labels_traefik_tls_certResolver: "{{ traefik_certResolver_primary }}"

miniflux_container_labels_traefik_compression_middleware_enabled: "{{ matrix_playbook_reverse_proxy_traefik_middleware_compression_enabled }}"
miniflux_container_labels_traefik_compression_middleware_name: "{{ matrix_playbook_reverse_proxy_traefik_middleware_compression_name if matrix_playbook_reverse_proxy_traefik_middleware_compression_enabled else '' }}"

miniflux_database_hostname: "{{ postgres_connection_hostname if postgres_enabled else '' }}"
miniflux_database_password: "{{ '%s' | format(matrix_homeserver_generic_secret_key) | password_hash('sha512', 'miniflux.db', rounds=655555) | to_uuid }}"

########################################################################
#                                                                      #
# Element                                                              #
#                                                                      #
########################################################################

# Unlike MDAD, we use https://github.com/etkecc/app (ghcr.io/etkecc/app) which enables some additional features
matrix_client_element_docker_image: "{{ matrix_client_element_docker_image_registry_prefix }}etkecc/app:{{ matrix_client_element_version }}"
matrix_client_element_docker_image_registry_prefix_upstream_default: gchr.io/

########################################################################
#                                                                      #
# radicale                                                             #
#                                                                      #
########################################################################

radicale_enabled: false

radicale_identifier: custom-radicale

radicale_base_path: "{{ matrix_base_data_path }}/custom-radicale"
radicale_config_path: "{{ radicale_base_path }}/conf"

radicale_uid: "{{ matrix_user_uid }}"
radicale_gid: "{{ matrix_user_gid }}"

# Unlike MASH, we use https://github.com/etkecc/radicale (ghcr.io/etkecc/radicale) which additionally provides the matrix-auth plugin
radicale_container_image: "{{ radicale_container_image_registry_prefix }}etkecc/radicale:{{ radicale_container_image_tag }}"
radicale_container_image_registry_prefix_upstream_default: ghcr.io/

radicale_container_network: "{{ matrix_addons_container_network }}"

radicale_container_additional_networks_auto: |
  {{
    ([matrix_playbook_reverse_proxyable_services_additional_network] if (matrix_playbook_reverse_proxyable_services_additional_network and radicale_container_labels_traefik_enabled) else [])
  }}

radicale_container_labels_traefik_enabled: "{{ matrix_playbook_reverse_proxy_type in ['playbook-managed-traefik', 'other-traefik-container'] }}"
radicale_container_labels_traefik_docker_network: "{{ matrix_playbook_reverse_proxyable_services_additional_network }}"
radicale_container_labels_traefik_entrypoints: "{{ traefik_entrypoint_primary }}"
radicale_container_labels_traefik_tls_certResolver: "{{ traefik_certResolver_primary }}"

########################################################################
#                                                                      #
# uptime-kuma                                                          #
#                                                                      #
########################################################################

uptime_kuma_enabled: false

uptime_kuma_identifier: custom-kuma

uptime_kuma_base_path: "{{ matrix_base_data_path }}/custom-kuma"

uptime_kuma_uid: "{{ matrix_user_uid }}"
uptime_kuma_gid: "{{ matrix_user_gid }}"

uptime_kuma_container_image_registry_prefix_upstream: "{{ matrix_container_global_registry_prefix_override if matrix_container_global_registry_prefix_override else uptime_kuma_container_image_registry_prefix_upstream_default }}"

uptime_kuma_container_network: "{{ matrix_addons_container_network }}"

uptime_kuma_container_additional_networks_auto: |
  {{
    ([matrix_playbook_reverse_proxyable_services_additional_network] if (matrix_playbook_reverse_proxyable_services_additional_network and uptime_kuma_container_labels_traefik_enabled) else [])
  }}

uptime_kuma_container_labels_traefik_enabled: "{{ matrix_playbook_reverse_proxy_type in ['playbook-managed-traefik', 'other-traefik-container'] }}"
uptime_kuma_container_labels_traefik_docker_network: "{{ matrix_playbook_reverse_proxyable_services_additional_network }}"
uptime_kuma_container_labels_traefik_entrypoints: "{{ traefik_entrypoint_primary }}"
uptime_kuma_container_labels_traefik_tls_certResolver: "{{ traefik_certResolver_primary }}"

########################################################################
#                                                                      #
# gotosocial                                                           #
#                                                                      #
########################################################################

gotosocial_enabled: false
gotosocial_identifier: "{{ mash_playbook_service_identifier_prefix }}gotosocial"
gotosocial_base_path: "{{ mash_playbook_base_path }}/{{ mash_playbook_service_base_directory_name_prefix }}gotosocial"

gotosocial_uid: "{{ mash_playbook_uid }}"
gotosocial_gid: "{{ mash_playbook_gid }}"

gotosocial_systemd_required_services_list_auto: |
  {{
    ([postgres_identifier ~ '.service'] if postgres_enabled and gotosocial_database_host == postgres_identifier else [])
  }}

gotosocial_systemd_wanted_services_list_auto: |
  {{
    ([(exim_relay_identifier | default('matrix-exim-relay')) ~ '.service'] if (exim_relay_enabled | default(false) and gotosocial_smtp_host == exim_relay_identifier | default('matrix-exim-relay')) else [])
  }}

gotosocial_container_image_registry_prefix_upstream: "{{ matrix_container_global_registry_prefix_override if matrix_container_global_registry_prefix_override else gotosocial_container_image_registry_prefix_upstream_default }}"

gotosocial_container_network: "{{ matrix_addons_container_network }}"

gotosocial_container_additional_networks_auto: |
  {{
    ([mash_playbook_reverse_proxyable_services_additional_network] if mash_playbook_reverse_proxyable_services_additional_network else [])
    +
    ([postgres_container_network] if postgres_enabled and gotosocial_database_host == postgres_identifier and gotosocial_container_network != postgres_container_network else [])
     +
    ([exim_relay_container_network | default('matrix-exim-relay')] if (exim_relay_enabled | default(false) and gotosocial_smtp_host == exim_relay_identifier | default('matrix-exim-relay') and exim_relay_container_network != gotosocial_container_network) else [])
  }}

gotosocial_container_labels_traefik_enabled: "{{ mash_playbook_traefik_labels_enabled }}"
gotosocial_container_labels_traefik_docker_network: "{{ mash_playbook_reverse_proxyable_services_additional_network }}"
gotosocial_container_labels_traefik_entrypoints: "{{ traefik_entrypoint_primary }}"
gotosocial_container_labels_traefik_tls_certResolver: "{{ traefik_certResolver_primary }}"

gotosocial_database_host: "{{ postgres_identifier if postgres_enabled else '' }}"
gotosocial_database_port: "{{ '5432' if postgres_enabled else '' }}"
gotosocial_database_password: "{{ '%s' | format(mash_playbook_generic_secret_key) | password_hash('sha512', 'db.gotosocial', rounds=655555) | to_uuid }}"
gotosocial_database_username: "{{ gotosocial_identifier }}"

# role-specific:exim_relay
gotosocial_smtp_host: "{{ exim_relay_identifier if exim_relay_enabled else '' }}"
gotosocial_smtp_port: 8025
gotosocial_smtp_from: "{{ exim_relay_sender_address if exim_relay_enabled else '' }}"
# /role-specific:exim_relay

########################################################################
#                                                                      #
# vaultwarden                                                          #
#                                                                      #
########################################################################

vaultwarden_enabled: false
vaultwarden_identifier: "{{ mash_playbook_service_identifier_prefix }}vaultwarden"
vaultwarden_uid: "{{ mash_playbook_uid }}"
vaultwarden_gid: "{{ mash_playbook_gid }}"

vaultwarden_base_path: "{{ mash_playbook_base_path }}/{{ mash_playbook_service_base_directory_name_prefix }}vaultwarden"

vaultwarden_systemd_required_services_list_auto: |
  {{
    ([postgres_identifier ~ '.service'] if postgres_enabled and vaultwarden_database_hostname == postgres_identifier else [])
  }}

vaultwarden_container_image_registry_prefix_upstream: "{{ matrix_container_global_registry_prefix_override if matrix_container_global_registry_prefix_override else vaultwarden_container_image_registry_prefix_upstream_default }}"

vaultwarden_container_network: "{{ matrix_addons_container_network }}"

vaultwarden_container_additional_networks_auto: |
  {{
    ([mash_playbook_reverse_proxyable_services_additional_network] if mash_playbook_reverse_proxyable_services_additional_network else [])
    +
    ([postgres_container_network] if postgres_enabled and vaultwarden_database_hostname == postgres_identifier and vaultwarden_container_network != postgres_container_network else [])
    +
    ([exim_relay_container_network | default('matrix-exim-relay')] if (exim_relay_enabled | default(false) and vaultwarden_config_smtp_host == exim_relay_identifier | default('matrix-exim-relay') and exim_relay_container_network != vaultwarden_container_network) else [])
  }}

vaultwarden_systemd_wanted_services_list_auto: |
  {{
    ([(exim_relay_identifier | default('matrix-exim-relay')) ~ '.service'] if (exim_relay_enabled | default(false) and vaultwarden_config_smtp_host == exim_relay_identifier | default('matrix-exim-relay')) else [])
  }}

vaultwarden_container_labels_traefik_enabled: "{{ mash_playbook_traefik_labels_enabled }}"
vaultwarden_container_labels_traefik_docker_network: "{{ mash_playbook_reverse_proxyable_services_additional_network }}"
vaultwarden_container_labels_traefik_entrypoints: "{{ traefik_entrypoint_primary }}"
vaultwarden_container_labels_traefik_tls_certResolver: "{{ traefik_certResolver_primary }}"

vaultwarden_container_labels_traefik_compression_middleware_enabled: "{{ matrix_playbook_reverse_proxy_traefik_middleware_compression_enabled }}"
vaultwarden_container_labels_traefik_compression_middleware_name: "{{ matrix_playbook_reverse_proxy_traefik_middleware_compression_name if matrix_playbook_reverse_proxy_traefik_middleware_compression_enabled else '' }}"

vaultwarden_database_hostname: "{{ postgres_identifier if postgres_enabled else '' }}"
vaultwarden_database_port: "{{ '5432' if postgres_enabled else '' }}"
vaultwarden_database_username: "vaultwarden"
vaultwarden_database_password: "{{ '%s' | format(mash_playbook_generic_secret_key) | password_hash('sha512', 'db.vaultwarden', rounds=655555) | to_uuid }}"

# role-specific:exim_relay
vaultwarden_config_smtp_from: "{{ exim_relay_sender_address if exim_relay_enabled else '' }}"
vaultwarden_config_smtp_host: "{{ exim_relay_identifier if exim_relay_enabled else '' }}"
vaultwarden_config_smtp_port: 8025
vaultwarden_config_smtp_security: "{{ 'off' if exim_relay_enabled else 'starttls' }}"
# /role-specific:exim_relay

########################################################################
#                                                                      #
# firezone                                                             #
#                                                                      #
########################################################################

firezone_enabled: false

firezone_identifier: "{{ mash_playbook_service_identifier_prefix }}firezone"

firezone_base_path: "{{ mash_playbook_base_path }}/{{ mash_playbook_service_base_directory_name_prefix }}firezone"

firezone_uid: "{{ mash_playbook_uid }}"
firezone_gid: "{{ mash_playbook_gid }}"
firezone_generic_secret: "{{ mash_playbook_generic_secret_key }}"

firezone_database_host: "{{ postgres_identifier if postgres_enabled else '' }}"
firezone_database_port: "{{ '5432' if postgres_enabled else '' }}"
firezone_database_password: "{{ '%s' | format(mash_playbook_generic_secret_key) | password_hash('sha512', 'fz.db.user', rounds=655555) | to_uuid }}"
firezone_database_username: "{{ firezone_identifier }}"

firezone_systemd_required_services_list_auto: |
  {{
    ([postgres_identifier ~ '.service'] if postgres_enabled | default(false) and firezone_database_host == postgres_identifier else [])
  }}

firezone_container_image_registry_prefix_upstream: "{{ matrix_container_global_registry_prefix_override if matrix_container_global_registry_prefix_override else firezone_container_image_registry_prefix_upstream_default }}"

firezone_container_network: "{{ matrix_addons_container_network }}"

firezone_container_additional_networks_auto: |
  {{
    ([mash_playbook_reverse_proxyable_services_additional_network] if mash_playbook_reverse_proxyable_services_additional_network else [])
    +
    ([postgres_container_network] if postgres_enabled | default(false) and firezone_database_host == postgres_identifier and firezone_container_network != postgres_container_network else [])
  }}

firezone_container_labels_traefik_enabled: "{{ mash_playbook_traefik_labels_enabled }}"
firezone_container_labels_traefik_docker_network: "{{ mash_playbook_reverse_proxyable_services_additional_network }}"
firezone_container_labels_traefik_entrypoints: "{{ traefik_entrypoint_primary }}"
firezone_container_labels_traefik_tls_certResolver: "{{ traefik_certResolver_primary }}"

########################################################################
#                                                                      #
# funkwhale                                                            #
#                                                                      #
########################################################################

funkwhale_enabled: false
funkwhale_identifier: "{{ mash_playbook_service_identifier_prefix }}funkwhale"
funkwhale_base_path: "{{ mash_playbook_base_path }}/{{ mash_playbook_service_base_directory_name_prefix }}funkwhale"

funkwhale_uid: "{{ mash_playbook_uid }}"
funkwhale_gid: "{{ mash_playbook_gid }}"
funkwhale_container_network: "{{ matrix_addons_container_network }}"

funkwhale_database_hostname: "{{ postgres_identifier if postgres_enabled else '' }}"
funkwhale_database_port: "{{ '5432' if postgres_enabled else '' }}"
funkwhale_database_password: "{{ '%s' | format(mash_playbook_generic_secret_key) | password_hash('sha512', 'db.funkwhale', rounds=655555) | to_uuid }}"
funkwhale_database_username: "{{ funkwhale_identifier }}"

funkwhale_email_protocol: "{{ 'smtp://' if exim_relay_enabled else 'consolemail://' }}"
funkwhale_email_host: "{{ exim_relay_identifier | default('matrix-exim-relay') }}"
funkwhale_email_port: 8025
funkwhale_email_username: ''
funkwhale_email_password: ''
funkwhale_email_from: "{{ exim_relay_sender_address if exim_relay_enabled else '' }}"
funkwhale_account_email_verification_enforce: "{{ exim_relay_enabled | default(false) }}"
funkwhale_django_secret_key: "{{ '%s' | format(mash_playbook_generic_secret_key) | password_hash('sha512', 'funkwhale', rounds=655555) | to_uuid }}"

funkwhale_config_redis_hostname: "{{ valkey_identifier if valkey_enabled else '' }}"

funkwhale_api_systemd_required_services_list_auto: |
  {{
    ([postgres_identifier ~ '.service'] if postgres_enabled and funkwhale_database_hostname == postgres_identifier else [])
    +
    ([valkey_identifier ~ '.service'] if valkey_enabled else [])
  }}

funkwhale_frontend_systemd_required_services_list_auto: |
  {{
    ([postgres_identifier ~ '.service'] if postgres_enabled and funkwhale_database_hostname == postgres_identifier else [])
  }}

funkwhale_api_container_additional_networks_auto: |
  {{
    ([mash_playbook_reverse_proxyable_services_additional_network] if mash_playbook_reverse_proxyable_services_additional_network else [])
    +
    ([postgres_container_network] if postgres_enabled and funkwhale_database_hostname == postgres_identifier and funkwhale_api_container_network != postgres_container_network else [])
    +
    ([exim_relay_container_network | default('matrix-exim-relay')] if (exim_relay_enabled | default(false) and funkwhale_email_host == exim_relay_identifier | default('matrix-exim-relay') and exim_relay_container_network != funkwhale_container_network) else [])
    +
    ([valkey_container_network] if valkey_enabled and funkwhale_config_redis_hostname == valkey_identifier else [])
  }}

funkwhale_frontend_container_additional_networks_auto: |
  {{
    ([mash_playbook_reverse_proxyable_services_additional_network] if mash_playbook_reverse_proxyable_services_additional_network else [])
    +
    ([postgres_container_network] if postgres_enabled and funkwhale_database_hostname == postgres_identifier and funkwhale_frontend_container_network != postgres_container_network else [])
    +
    ([exim_relay_container_network | default('matrix-exim-relay')] if (exim_relay_enabled | default(false) and funkwhale_email_host == exim_relay_identifier | default('matrix-exim-relay') and exim_relay_container_network != funkwhale_container_network) else [])
  }}

funkwhale_api_container_labels_traefik_enabled: "{{ mash_playbook_traefik_labels_enabled }}"
funkwhale_api_container_labels_traefik_docker_network: "{{ mash_playbook_reverse_proxyable_services_additional_network }}"
funkwhale_api_container_labels_traefik_entrypoints: "{{ traefik_entrypoint_primary }}"
funkwhale_api_container_labels_traefik_tls_certResolver: "{{ traefik_certResolver_primary }}"

funkwhale_frontend_container_labels_traefik_enabled: "{{ mash_playbook_traefik_labels_enabled }}"
funkwhale_frontend_container_labels_traefik_docker_network: "{{ mash_playbook_reverse_proxyable_services_additional_network }}"
funkwhale_frontend_container_labels_traefik_entrypoints: "{{ traefik_entrypoint_primary }}"
funkwhale_frontend_container_labels_traefik_tls_certResolver: "{{ traefik_certResolver_primary }}"

funkwhale_container_image_registry_prefix_upstream: "{{ matrix_container_global_registry_prefix_override if matrix_container_global_registry_prefix_override else funkwhale_container_image_registry_prefix_upstream_default }}"

########################################################################
#                                                                      #
# peertube                                                             #
#                                                                      #
########################################################################

peertube_enabled: false
peertube_identifier: "{{ mash_playbook_service_identifier_prefix }}peertube"
peertube_base_path: "{{ mash_playbook_base_path }}/{{ mash_playbook_service_base_directory_name_prefix }}peertube"

peertube_uid: "{{ mash_playbook_uid }}"
peertube_gid: "{{ mash_playbook_gid }}"
peertube_container_network: "{{ matrix_addons_container_network }}"
peertube_container_rtmp_host_bind_port: 1935

# role-specific:exim_relay
peertube_config_smtp_hostname: "{{ exim_relay_identifier if exim_relay_enabled else '' }}"
peertube_config_smtp_port: "{{ 8025 if exim_relay_enabled else '' }}"
peertube_config_smtp_from: "{{ exim_relay_sender_address if exim_relay_enabled else '' }}"
# /role-specific:exim_relay

peertube_container_image_registry_prefix_upstream: "{{ matrix_container_global_registry_prefix_override if matrix_container_global_registry_prefix_override else peertube_container_image_registry_prefix_upstream_default }}"

peertube_container_additional_networks_auto: |
  {{
    (
      ([mash_playbook_reverse_proxyable_services_additional_network] if mash_playbook_reverse_proxyable_services_additional_network else [])
      +
      ([postgres_container_network] if postgres_enabled and peertube_config_database_hostname == postgres_identifier and peertube_container_network != postgres_container_network else [])
      +
      ([valkey_container_network] if valkey_enabled and peertube_config_redis_hostname == valkey_identifier else [])
      +
      ([exim_relay_container_network | default('matrix-exim-relay')] if (exim_relay_enabled | default(false) and peertube_config_smtp_hostname == exim_relay_identifier | default('matrix-exim-relay') and exim_relay_container_network != peertube_container_network) else [])
    ) | unique
  }}

peertube_container_labels_traefik_enabled: "{{ mash_playbook_traefik_labels_enabled }}"
peertube_container_labels_traefik_docker_network: "{{ mash_playbook_reverse_proxyable_services_additional_network }}"
peertube_container_labels_traefik_entrypoints: "{{ traefik_entrypoint_primary }}"
peertube_container_labels_traefik_tls_certResolver: "{{ traefik_certResolver_primary }}"

peertube_config_database_hostname: "{{ postgres_identifier if postgres_enabled else '' }}"
peertube_config_database_port: "{{ '5432' if postgres_enabled else '' }}"
peertube_config_database_username: peertube
peertube_config_database_password: "{{ '%s' | format(mash_playbook_generic_secret_key) | password_hash('sha512', 'db.peertube', rounds=655555) | to_uuid }}"

# role-specific:valkey
peertube_config_redis_hostname: "{{ valkey_identifier if valkey_enabled else '' }}"
# /role-specific:valkey

peertube_systemd_required_services_list_auto: |
  {{
    ([postgres_identifier ~ '.service'] if postgres_enabled and peertube_config_database_hostname == postgres_identifier else [])
    +
    ([valkey_identifier ~ '.service'] if valkey_enabled | default(false) and peertube_config_redis_hostname == valkey_identifier | default('matrix-valkey') else [])
  }}

peertube_systemd_wanted_services_list_auto: |
  {{
    ([(exim_relay_identifier | default('matrix-exim-relay')) ~ '.service'] if (exim_relay_enabled | default(false) and peertube_config_smtp_hostname == exim_relay_identifier | default('matrix-exim-relay')) else [])
  }}

########################################################################
#                                                                      #
# matrix/synapse-auto-compressor                                       #
#                                                                      #
########################################################################

# The cleanup role will delete our custom network, because it's unused unless the timer gets triggered.
# As a workaround, we just reuse some other network.
# Some servers don't use a playbook-managed Postgres, so we can't use `postgres_container_network` everywhere.
# The Synapse network is available everywhere where Synapse is enabled though.
matrix_synapse_auto_compressor_container_network: "{{ matrix_synapse_container_network }}"


########################################################################
#                                                                      #
# com.devture.ansible.role.systemd_service_manager                     #
#                                                                      #
########################################################################

# Restarting services one by one leads to less downtime
devture_systemd_service_manager_service_restart_mode: one-by-one

# We don't verify that services managed to start to decrease playbook runtime.
# Prometheus will notify us about service failure.
devture_systemd_service_manager_up_verification_enabled: false

devture_systemd_service_manager_services_list_additional: |
  {{
    ([{'name': (gotosocial_identifier + '.service'), 'priority': 5000, 'groups': ['etke', 'gotosocial']}] if gotosocial_enabled else [])
    +
    ([{'name': (uptime_kuma_identifier + '.service'), 'priority': 5000, 'groups': ['etke', 'uptime-kuma']}] if uptime_kuma_enabled else [])
    +
    ([{'name': (vaultwarden_identifier + '.service'), 'priority': 2000, 'groups': ['etke', 'vaultwarden', 'vaultwarden-server']}] if vaultwarden_enabled else [])
    +
    ([{'name': (languagetool_identifier + '.service'), 'priority': 5000, 'groups': ['etke', 'languagetool']}] if languagetool_enabled else [])
    +
    ([{'name': (miniflux_identifier + '.service'), 'priority': 5000, 'groups': ['etke', 'miniflux']}] if miniflux_enabled else [])
    +
    ([{'name': (linkding_identifier + '.service'), 'priority': 2000, 'groups': ['etke', 'linkding']}] if linkding_enabled else [])
    +
    ([{'name': (radicale_identifier + '.service'), 'priority': 5000, 'groups': ['etke', 'radicale']}] if radicale_enabled else [])
    +
    ([{'name': (firezone_identifier + '.service'), 'priority': 5000, 'groups': ['etke', 'firezone']}] if firezone_enabled else [])
    +
    ([{'name': (funkwhale_api_identifier + '.service'), 'priority': 2000, 'groups': ['etke', 'funkwhale']}] if funkwhale_enabled else [])
    +
    ([{'name': (funkwhale_frontend_identifier + '.service'), 'priority': 2000, 'groups': ['etke', 'funkwhale']}] if funkwhale_enabled else [])
    +
    ([{'name': (funkwhale_celery_beat_identifier + '.service'), 'priority': 2000, 'groups': ['etke', 'funkwhale']}] if funkwhale_enabled else [])
    +
    ([{'name': (funkwhale_celery_worker_identifier + '.service'), 'priority': 2000, 'groups': ['etke', 'funkwhale']}] if funkwhale_enabled else [])
    +
    ([{'name': (peertube_identifier + '.service'), 'priority': 2000, 'groups': ['etke', 'peertube']}] if peertube_enabled else [])
  }}

########################################################################
#                                                                      #
# /com.devture.ansible.role.systemd_service_manager                    #
#                                                                      #
########################################################################


########################################################################
#                                                                      #
# com.devture.ansible.role.postgres                                    #
#                                                                      #
########################################################################

postgres_managed_databases_additional: |
  {{
    ([{
      'name': miniflux_database_name,
      'username': miniflux_database_username,
      'password': miniflux_database_password,
    }] if miniflux_enabled else [])
    +
    ([{
      'name': linkding_database_name,
      'username': linkding_database_username,
      'password': linkding_database_password,
    }] if linkding_enabled and linkding_database_engine == 'postgres' else [])
    +
    ([{
      'name': gotosocial_database_name,
      'username': gotosocial_database_username,
      'password': gotosocial_database_password,
    }] if gotosocial_enabled else [])
    +
    ([{
      'name': vaultwarden_database_name,
      'username': vaultwarden_database_username,
      'password': vaultwarden_database_password,
    }] if vaultwarden_enabled else [])
    +
    ([{
      'name': firezone_database_name,
      'username': firezone_database_username,
      'password': firezone_database_password,
    }] if firezone_enabled else [])
    +
    ([{
      'name': funkwhale_database_name,
      'username': funkwhale_database_username,
      'password': funkwhale_database_password,
      }] if funkwhale_enabled else [])
    +
    ([{
      'name': peertube_config_database_name,
      'username': peertube_config_database_username,
      'password': peertube_config_database_password,
    }] if peertube_enabled else [])
  }}

########################################################################
#                                                                      #
# /com.devture.ansible.role.postgres                                   #
#                                                                      #
########################################################################
