---
# This utility aims to determine if there is some existing Postgres version in use or not.
# If there is, it also tries to detect the container image that corresponds to that version.
#
# This utility is intentionally not in `tasks/util`, because if it were, it wouldn't be possible
# to include it in other roles via the include_role module: https://docs.ansible.com/ansible/latest/collections/ansible/builtin/include_role_module.html

- name: Initialize Postgres version determination variables (default to empty)
  ansible.builtin.set_fact:
    postgres_detection_pg_version_path: "{{ postgres_data_path }}/PG_VERSION"
    postgres_detected_existing: false
    postgres_detected_version_string: ""
    postgres_detected_version_number: 0
    postgres_detected_version_corresponding_container_image: ""

- name: Determine existing Postgres version (check PG_VERSION file)
  ansible.builtin.stat:
    path: "{{ postgres_detection_pg_version_path }}"
  register: result_pg_version_stat

- ansible.builtin.set_fact:
    postgres_detected_existing: true
  when: "result_pg_version_stat.stat.exists"

- name: Determine existing Postgres version (if detected)
  when: postgres_detected_existing | bool
  block:
    - name: Determine existing Postgres version (read PG_VERSION file)
      ansible.builtin.slurp:
        src: "{{ postgres_detection_pg_version_path }}"
      register: result_pg_version

    - name: Determine existing Postgres version (make sense of PG_VERSION file)
      ansible.builtin.set_fact:
        postgres_detected_version_string: "{{ result_pg_version['content'] | b64decode | replace('\n', '') }}"

    - name: Determine corresponding container image to detected version (use 9.x, if detected)
      ansible.builtin.set_fact:
        postgres_detected_version_number: 9
      when: "postgres_detected_version_string.startswith('9.')"

    - name: Determine corresponding container image to detected version (use 10.x, if detected)
      ansible.builtin.set_fact:
        postgres_detected_version_number: 10
      when: "postgres_detected_version_string == '10' or postgres_detected_version_string.startswith('10.')"

    - name: Determine corresponding container image to detected version (use 11.x, if detected)
      ansible.builtin.set_fact:
        postgres_detected_version_number: 11
      when: "postgres_detected_version_string == '11' or postgres_detected_version_string.startswith('11.')"

    - name: Determine corresponding container image to detected version (use 12.x, if detected)
      ansible.builtin.set_fact:
        postgres_detected_version_number: 12
      when: "postgres_detected_version_string == '12' or postgres_detected_version_string.startswith('12.')"

    - name: Determine corresponding container image to detected version (use 13.x, if detected)
      ansible.builtin.set_fact:
        postgres_detected_version_number: 13
      when: "postgres_detected_version_string == '13' or postgres_detected_version_string.startswith('13.')"

    - name: Determine corresponding container image to detected version (use 14.x, if detected)
      ansible.builtin.set_fact:
        postgres_detected_version_number: 14
      when: "postgres_detected_version_string == '14' or postgres_detected_version_string.startswith('14.')"

    - name: Determine corresponding container image to detected version (use 15.x, if detected)
      ansible.builtin.set_fact:
        postgres_detected_version_number: 15
      when: "postgres_detected_version_string == '15' or postgres_detected_version_string.startswith('15.')"

    - name: Determine corresponding container image to detected version (use 16.x, if detected)
      ansible.builtin.set_fact:
        postgres_detected_version_number: 16
      when: "postgres_detected_version_string == '16' or postgres_detected_version_string.startswith('16.')"

    - name: Determine corresponding container image to detected version (use 17.x, if detected)
      ansible.builtin.set_fact:
        postgres_detected_version_number: 17
      when: "postgres_detected_version_string == '17' or postgres_detected_version_string.startswith('17.')"

    - name: Determine corresponding container image to detected version (use 18.x, if detected)
      ansible.builtin.set_fact:
        postgres_detected_version_number: 18
      when: "postgres_detected_version_string == '18' or postgres_detected_version_string.startswith('18.')"

    - name: Fail if detected Postgres version number not known to us
      ansible.builtin.fail:
        msg: "Unknown Postgres version number: {{ postgres_detected_version_number }}"
      when: "postgres_detected_version_number not in postgres_known_versions"

    - name: Populate corresponding Postgres container image based on detected version
      ansible.builtin.set_fact:
        postgres_detected_version_corresponding_container_image: "{{ postgres_container_image_by_major_version[postgres_detected_version_number | string] }}"
