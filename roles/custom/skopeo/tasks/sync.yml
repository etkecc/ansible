---

- name: Initialize images vars
  ansible.builtin.set_fact:
    skopeo_sources: "{{ skopeo_static }}"
    skopeo_commands: []
    skopeo_targets: {}
    skopeo_final: {}

- name: Populate source images list
  ansible.builtin.set_fact:
    skopeo_sources: "{{ skopeo_sources + [lookup('vars', item)] }}"
  loop: "{{ query('varnames', '^.*_(docker|container)_image(_v[0-9]+|_latest)?$') }}"

- name: Unique source images list
  ansible.builtin.set_fact:
    skopeo_sources: "{{ skopeo_sources | unique | sort }}"

- name: Print list of source images
  debug:
    msg: "{{ skopeo_sources }}"

- name: Populate target images dict
  ansible.builtin.set_fact:
    skopeo_targets: "{{ skopeo_targets | combine({item: skopeo_target + item | regex_search('/.*')}) }}"
  when: item not in skopeo_ignore_images
  loop: "{{ skopeo_sources }}"

- name: Check image status
  ansible.builtin.uri:
    url: "https://{{ skopeo_target }}/v2{{ item | regex_search('\/.*') | replace(':', '/manifests/') }}"
    method: HEAD
    status_code: [200, 404]
    headers: # accept header copied from docker v25.0.x
      Accept: application/json, application/vnd.docker.distribution.manifest.list.v2+json, application/vnd.docker.distribution.manifest.v1+prettyjws, application/vnd.docker.distribution.manifest.v2+json, application/vnd.oci.image.index.v1+json, application/vnd.oci.image.manifest.v1+json
  when: item not in skopeo_ignore_images
  failed_when: false
  loop: "{{ skopeo_sources }}"
  register: skopeo_status

- name: Populate commands list (all)
  ansible.builtin.set_fact:
    skopeo_commands: "{{ skopeo_commands + ['skopeo sync --all --preserve-digests --src docker --dest docker ' + item.item + ' ' + skopeo_target + (item.item|regex_search('/.*')|regex_search('.*/'))] }}"
  when: item.item not in skopeo_ignore_images and (item.status | default(-1) != 200 or item.item.endswith(':latest'))
  loop_control:
    label: "{{ item.item }}"
  loop: "{{ skopeo_status.results }}"
  become: false
  delegate_to: 127.0.0.1

- name: Write commands list
  ansible.builtin.copy:
    content: "({% for command in skopeo_commands %}echo \"{{ command }}\"; {% endfor %}echo \"echo list generated\") | parallel"
    dest: .skopeo-parallel
  become: false
  delegate_to: 127.0.0.1
