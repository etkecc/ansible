---
- name: Ensure wireguard packages installed
  ansible.builtin.package:
    name:
      - wireguard-tools
      - wireguard-dkms
  when: ansible_kernel is version('5.6', '<')

- name: Ensure wireguard packages installed
  ansible.builtin.package:
    name: wireguard-tools
  when: ansible_kernel is version('5.6', '>=')

- name: Check existence of wireguard server config
  ansible.builtin.stat:
    path: "{{ custom_wireguard_path }}/{{ custom_wireguard_interface }}.conf"
  register: server_conf

- name: Ensure IPv4 forwarding enabled
  ansible.posix.sysctl:
    name: net.ipv4.ip_forward
    value: '1'
    state: present

- name: Ensure IPv6 forwarding enabled
  ansible.posix.sysctl:
    name: net.ipv6.conf.all.forwarding
    value: '1'
    state: present

- name: Ensure wireguard directories created
  ansible.builtin.file:
    path: "{{ item }}"
    mode: 0600
    state: directory
    group: root
    owner: root
  with_items:
    - /etc/wireguard
    - /etc/wireguard/clients
  when: not server_conf.stat.exists|bool

- name: Ensure wireguard clients directories created
  ansible.builtin.file:
    path: "{{ custom_wireguard_path }}/clients/{{ item }}"
    mode: 0600
    state: directory
    group: root
    owner: root
  with_items: "{{ custom_wireguard_clients }}"
  when: not server_conf.stat.exists|bool

- name: Generate wireguard server private key
  ansible.builtin.shell: "umask 077; wg genkey | tee {{ custom_wireguard_path }}/key | wg pubkey > {{ custom_wireguard_path }}/key.public"
  when: not server_conf.stat.exists|bool

- name: Register server private key contents
  ansible.builtin.shell: "cat {{ custom_wireguard_path }}/key"
  register: server_key_private

- name: Register server public key contents
  ansible.builtin.shell: "cat {{ custom_wireguard_path }}/key.public"
  register: server_key_public

- name: Check existence of wireguard client configuration
  ansible.builtin.stat:
    path: "{{ custom_wireguard_path }}/clients/{{ item.1 }}/profile.conf"
  register: client_profiles
  with_indexed_items: "{{ custom_wireguard_clients }}"

- name: Check existence of wireguard client key
  ansible.builtin.stat:
    path: "{{ custom_wireguard_path }}/clients/{{ item.1 }}/key"
  register: client_keys
  with_indexed_items: "{{ custom_wireguard_clients }}"

- name: Generate client keys
  ansible.builtin.shell: "umask 077; wg genkey | tee \"{{ custom_wireguard_path }}/clients/{{ item.1 }}/key\" | wg pubkey > \"{{ custom_wireguard_path }}/clients/{{ item.1 }}/key.public\""
  with_indexed_items: "{{ custom_wireguard_clients }}"
  when: not client_keys.results[item.0].stat.exists|bool

- name: Register client private key
  ansible.builtin.shell: "cat \"{{ custom_wireguard_path }}/clients/{{ item.1 }}/key\""
  register: client_keys_private
  with_indexed_items: "{{ custom_wireguard_clients }}"

- name: Register client public key
  ansible.builtin.shell: "cat \"{{ custom_wireguard_path }}/clients/{{ item.1 }}/key.public\""
  register: client_keys_public
  with_indexed_items: "{{ custom_wireguard_clients }}"

- name: Ensure wireguard client config created
  ansible.builtin.template:
    src: "client.conf.j2"
    dest: "{{ custom_wireguard_path }}/clients/{{ item.1 }}/profile.conf"
    owner: root
    group: root
    mode: 0600
  with_indexed_items: "{{ custom_wireguard_clients }}"
  when: not client_profiles.results[item.0].stat.exists|bool or custom_wireguard_overwrite|bool

- name: Ensure wireguard server config created
  ansible.builtin.template:
    src: "server.conf.j2"
    dest: "{{ custom_wireguard_path }}/{{ custom_wireguard_interface }}.conf"
    owner: root
    group: root
    mode: 0600
  when: not server_conf.stat.exists|bool or custom_wireguard_overwrite|bool

- name: Start wireguard service
  ansible.builtin.service:
    name: "wg-quick@{{ custom_wireguard_interface }}"
    enabled: true
    state: started

- name: Ensure wireguard server reloaded
  ansible.builtin.shell: "wg syncconf {{ custom_wireguard_interface }} <(wg-quick strip {{ custom_wireguard_interface }})"
  args:
    executable: /bin/bash
