#!/bin/sh
#
#    purge-old-kernels - remove old kernel packages
#    Copyright (C) 2012      Dustin Kirkland <kirkland@ubuntu.com>
#                  2017-2021 Esteban M. Navas Martín <algodelinux@gmail.com>
#
#    Authors: Dustin Kirkland <kirkland@ubuntu.com>
#             Kees Cook <kees@ubuntu.com>
#             Esteban M. Navas Martín <algodelinux@gmail.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, version 3 of the License.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Ensure we're running as root
if [ "$(id -u)" != 0 ]; then
	echo "ERROR: This script must run as root.  Hint..." 1>&2
	echo "  sudo $0 $@" 1>&2
	exit 1
fi

# NOTE: This script will ALWAYS keep the currently running kernel
# NOTE: Default is to keep 2 more, user overrides with --keep N
KEEP=2
# NOTE: Any unrecognized option will be passed straight through to apt-get
APT_OPTS=
while [ ! -z "$1" ]; do
	case "$1" in
		--keep)
			# User specified the number of kernels to keep
			KEEP="$2"
			shift 2
		;;
		*)
			APT_OPTS="$APT_OPTS $1"
			shift 1
		;;
	esac
done

# Get kernel type: pve or not
PVE_KERNEL=$(uname -r|grep pve)

# Build our list of kernel packages to purge
if [ -n "$PVE_KERNEL" ]; then
   CANDIDATES=$(ls -tr /boot/vmlinuz-* | head -n -${KEEP} | grep -v "$(uname -r)$" | cut -d- -f2- | awk '{print "pve-kernel-" $0 " pve-headers-" $0}' )

   for c in $CANDIDATES; do
       PURGE="$PURGE $(dpkg -l | grep -e $c | awk '{print $2}' |  tr "\n" " ")"
   done
else
   # Remove old /lib/modules kernel directories
   find /lib/modules -mindepth 1 -maxdepth 1 $(dpkg -l | grep -oiE 'linux-modules-[0-9]+\.[0-9]+\.[0-9]+-[0-9]+-generic' | sed 's/linux-modules-/-not -name /' | tr "\n" " ") -exec rm -fr {} \;

   CANDIDATES=$(ls -tr /boot/vmlinuz-* | head -n -${KEEP} | grep -v "$(uname -r)$" | grep -oiE '[0-9]+\.[0-9]+\.[0-9]+-[0-9]+')

   for c in $CANDIDATES; do
       PURGE="$PURGE $(dpkg -l|grep -e linux-.*$c | awk '{print $2}' |  tr "\n" " ")"
   done
fi

if [ -z "$PURGE" ]; then
	echo "No kernels are eligible for removal"
	exit 0
fi

# Purge old installed kernels
apt-get $APT_OPTS remove --purge $PURGE

# Build our list of uninstalled kernel packages to purge
if [ -n "$PVE_KERNEL" ]; then
   REMOVED=$(dpkg -l| grep ^rc | awk '{print $2}' | grep -e pve-kernel -e pve-keaders)
else
   REMOVED=$(dpkg -l| grep ^rc | awk '{print $2}' | grep -e linux-image -e linux-keaders)
fi

# Purge old uninstalled kernels
[ -n "$REMOVED" ] && apt-get $APT_OPTS remove --purge $REMOVED

if [ -z "$PVE_KERNEL" ]; then
   # Remove old /lib/modules kernel directories
   find /lib/modules -mindepth 1 -maxdepth 1 $(dpkg -l | grep -oiE 'linux-modules-[0-9]+\.[0-9]+\.[0-9]+-[0-9]+-generic' | sed 's/linux-modules-/-not -name /' | tr "\n" " ") -exec rm -fr {} \;
fi
